#ifndef _solid_included_1689072258736476253476523746253762891197615035283652353 
#define _solid_included_1689072258736476253476523746253762891197615035283652353

#include <GL/glew.h> 														                                                // OpenGL extensions
#include <glm/glm.hpp>

// ======================================================================================================================================================================================================================
// Non - indexed mesh 
// ======================================================================================================================================================================================================================
struct solid
{
	// ==================================================================================================================================================================================================================
	// the number of vertices in the GL_TRIANGLES array
	// ==================================================================================================================================================================================================================
    GLuint mesh_size;

	// ==================================================================================================================================================================================================================
	// id of the VAO, and 3 buffer objects : vertices + normals +  tangents + texture coordinates
	// ==================================================================================================================================================================================================================
    GLuint vao_id, vbo_id, nbo_id, txbo_id, tybo_id, tbo_id;

	// ==================================================================================================================================================================================================================
	// diffuse and normal textures
	// ==================================================================================================================================================================================================================
    GLuint texture_id, normal_texture_id;    

    solid(const glm::vec3* vertices, const glm::vec3* normals, const glm::vec2* uvs, GLuint mesh_size);
    void instanced_render(GLsizei primcount);
    ~solid();
};

// ======================================================================================================================================================================================================================
// Indexed mesh, representing a smooth surface
// ======================================================================================================================================================================================================================
struct surface
{
	// ==================================================================================================================================================================================================================
	// the number of indices in the GL_TRIANGLES array
	// ==================================================================================================================================================================================================================
    GLuint mesh_size;

	// ==================================================================================================================================================================================================================
	// id of the VAO, and 3 buffer objects : vertices + normals + tangents + texture coordinates
	// ==================================================================================================================================================================================================================
    GLuint vao_id, vbo_id, nbo_id, txbo_id, tybo_id, tbo_id;
    GLuint ibo_id;

	typedef glm::vec3 (*surface_func) (const glm::vec2& uv);

	// ==================================================================================================================================================================================================================
	// diffuse and normal textures
	// ==================================================================================================================================================================================================================
    GLuint texture_id, normal_texture_id;    

    surface(surface_func f, unsigned int m, unsigned int n);
    void instanced_render(GLsizei primcount);
    ~surface();
};

// ======================================================================================================================================================================================================================
// Indexed mesh, representing graph of a function on the square -1 < x,y < 1
// ======================================================================================================================================================================================================================
struct graph
{
	GLuint vao_id, vbo_id, nbo_id, tbo_id, ibo_id;
	GLuint triangles;

	typedef float (*generator_func) (const glm::vec2& argument);

	graph();
	~graph();
	void generate_vao(generator_func func, glm::ivec2 size);
	void render();
};

// ======================================================================================================================================================================================================================
// Indexed mesh, representing a smooth surface, topologically equivalent to sphere
// ======================================================================================================================================================================================================================
struct spherical_surface
{
	GLuint vao_id, vbo_id, nbo_id, tbo_id, ibo_id;
	GLuint triangles;

	typedef glm::vec3 (*generator_func) (const glm::vec3& argument);

	spherical_surface();
	~spherical_surface();
	void generate_vao(generator_func func, GLuint level);
	void render();

  private:	

	struct uvec2_lex : public glm::uvec2
	{
		uvec2_lex(GLuint a, GLuint b) : glm::uvec2(a, b) {};

		friend bool operator < (const uvec2_lex a, const uvec2_lex b)
		{
			if (a.y < b.y) return true;
			if (a.y > b.y) return false;
			if (a.x < b.x) return true;
			return false;
		};
	};

};

// ======================================================================================================================================================================================================================
// Indexed mesh, representing a smooth surface, topologically equivalent to torus
// ======================================================================================================================================================================================================================
struct toral_surface
{
	GLuint vao_id, vbo_id, nbo_id, tbo_id, ibo_id;
	GLuint index_count;

	typedef glm::vec3 (*generator_func) (const glm::vec2& argument);

	toral_surface();
	~toral_surface();
	void generate_vao(generator_func func, glm::ivec2 size);
	void render();

};

#endif // _solid_included_1689072258736476253476523746253762891197615035283652353
