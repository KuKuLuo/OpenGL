#version 430 core

uniform float time;

//========================================================================================================================================================================================================================
// The shader does horizontal FFT transform for a 2D n x n input 
//========================================================================================================================================================================================================================
layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

#define n 512
#define m 9
#define bit_reverse_lut br64

int iX = int(gl_GlobalInvocationID.x);
int iY = int(gl_GlobalInvocationID.y);

//========================================================================================================================================================================================================================
// Input buffer :: the input data is a complex (packed as vec2) N x N matrix
// No bit reversing step is performed, therefore the first butterfly step should be different from the
// following and essentially perform both bit reversing and butterfly.
// It make sence to separate it in any case as for the first butterfly step roots of unity 
// are so simple that no multiplication is required at all
//========================================================================================================================================================================================================================
layout (rg32f, binding = 0) uniform imageBuffer input_buffer;
layout (rg32f, binding = 1) uniform imageBuffer inout_buffer;

shared vec2 Z[n];

//========================================================================================================================================================================================================================
// Bit reversion lookup tables
//========================================================================================================================================================================================================================
const int br8[8]     = {0x0, 0x4, 0x2, 0x6, 0x1, 0x5, 0x3, 0x7};

const int br16[16]   = {0x00, 0x08, 0x04, 0x0C, 0x02, 0x0A, 0x06, 0x0E, 0x01, 0x09, 0x05, 0x0D, 0x03, 0x0B, 0x07, 0x0F};

const int br32[32]   = {0x00, 0x10, 0x08, 0x18, 0x04, 0x14, 0x0C, 0x1C, 0x02, 0x12, 0x0A, 0x1A, 0x06, 0x16, 0x0E, 0x1E, 
                        0x01, 0x11, 0x09, 0x19, 0x05, 0x15, 0x0D, 0x1D, 0x03, 0x13, 0x0B, 0x1B, 0x07, 0x17, 0x0F, 0x1F};

const int br64[64]   = {0x00, 0x20, 0x10, 0x30, 0x08, 0x28, 0x18, 0x38, 0x04, 0x24, 0x14, 0x34, 0x0C, 0x2C, 0x1C, 0x3C,
                        0x02, 0x22, 0x12, 0x32, 0x0A, 0x2A, 0x1A, 0x3A, 0x06, 0x26, 0x16, 0x36, 0x0E, 0x2E, 0x1E, 0x3E, 
                        0x01, 0x21, 0x11, 0x31, 0x09, 0x29, 0x19, 0x39, 0x05, 0x25, 0x15, 0x35, 0x0D, 0x2D, 0x1D, 0x3D,
                        0x03, 0x23, 0x13, 0x33, 0x0B, 0x2B, 0x1B, 0x3B, 0x07, 0x27, 0x17, 0x37, 0x0F, 0x2F, 0x1F, 0x3F};

const int br128[128] = {0x00, 0x40, 0x20, 0x60, 0x10, 0x50, 0x30, 0x70, 0x08, 0x48, 0x28, 0x68, 0x18, 0x58, 0x38, 0x78, 
                        0x04, 0x44, 0x24, 0x64, 0x14, 0x54, 0x34, 0x74, 0x0C, 0x4C, 0x2C, 0x6C, 0x1C, 0x5C, 0x3C, 0x7C, 
                        0x02, 0x42, 0x22, 0x62, 0x12, 0x52, 0x32, 0x72, 0x0A, 0x4A, 0x2A, 0x6A, 0x1A, 0x5A, 0x3A, 0x7A, 
                        0x06, 0x46, 0x26, 0x66, 0x16, 0x56, 0x36, 0x76, 0x0E, 0x4E, 0x2E, 0x6E, 0x1E, 0x5E, 0x3E, 0x7E, 
                        0x01, 0x41, 0x21, 0x61, 0x11, 0x51, 0x31, 0x71, 0x09, 0x49, 0x29, 0x69, 0x19, 0x59, 0x39, 0x79, 
                        0x05, 0x45, 0x25, 0x65, 0x15, 0x55, 0x35, 0x75, 0x0D, 0x4D, 0x2D, 0x6D, 0x1D, 0x5D, 0x3D, 0x7D, 
                        0x03, 0x43, 0x23, 0x63, 0x13, 0x53, 0x33, 0x73, 0x0B, 0x4B, 0x2B, 0x6B, 0x1B, 0x5B, 0x3B, 0x7B, 
                        0x07, 0x47, 0x27, 0x67, 0x17, 0x57, 0x37, 0x77, 0x0F, 0x4F, 0x2F, 0x6F, 0x1F, 0x5F, 0x3F, 0x7F};

const int br256[256] = {0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0, 
                        0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8, 0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8, 
                        0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4, 
                        0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC, 
                        0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2, 0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2, 
                        0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA, 
                        0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6, 
                        0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE, 0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE, 
                        0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1, 
                        0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9, 
                        0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5, 0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5, 
                        0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD, 
                        0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3, 
                        0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB, 0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB, 
                        0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7, 
                        0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF};

const int br512[512] = {0x000, 0x100, 0x080, 0x180, 0x040, 0x140, 0x0C0, 0x1C0, 0x020, 0x120, 0x0A0, 0x1A0, 0x060, 0x160, 0x0E0, 0x1E0, 
                        0x010, 0x110, 0x090, 0x190, 0x050, 0x150, 0x0D0, 0x1D0, 0x030, 0x130, 0x0B0, 0x1B0, 0x070, 0x170, 0x0F0, 0x1F0, 
                        0x008, 0x108, 0x088, 0x188, 0x048, 0x148, 0x0C8, 0x1C8, 0x028, 0x128, 0x0A8, 0x1A8, 0x068, 0x168, 0x0E8, 0x1E8, 
                        0x018, 0x118, 0x098, 0x198, 0x058, 0x158, 0x0D8, 0x1D8, 0x038, 0x138, 0x0B8, 0x1B8, 0x078, 0x178, 0x0F8, 0x1F8, 
                        0x004, 0x104, 0x084, 0x184, 0x044, 0x144, 0x0C4, 0x1C4, 0x024, 0x124, 0x0A4, 0x1A4, 0x064, 0x164, 0x0E4, 0x1E4, 
                        0x014, 0x114, 0x094, 0x194, 0x054, 0x154, 0x0D4, 0x1D4, 0x034, 0x134, 0x0B4, 0x1B4, 0x074, 0x174, 0x0F4, 0x1F4, 
                        0x00C, 0x10C, 0x08C, 0x18C, 0x04C, 0x14C, 0x0CC, 0x1CC, 0x02C, 0x12C, 0x0AC, 0x1AC, 0x06C, 0x16C, 0x0EC, 0x1EC, 
                        0x01C, 0x11C, 0x09C, 0x19C, 0x05C, 0x15C, 0x0DC, 0x1DC, 0x03C, 0x13C, 0x0BC, 0x1BC, 0x07C, 0x17C, 0x0FC, 0x1FC, 
                        0x002, 0x102, 0x082, 0x182, 0x042, 0x142, 0x0C2, 0x1C2, 0x022, 0x122, 0x0A2, 0x1A2, 0x062, 0x162, 0x0E2, 0x1E2,
                        0x012, 0x112, 0x092, 0x192, 0x052, 0x152, 0x0D2, 0x1D2, 0x032, 0x132, 0x0B2, 0x1B2, 0x072, 0x172, 0x0F2, 0x1F2,
                        0x00A, 0x10A, 0x08A, 0x18A, 0x04A, 0x14A, 0x0CA, 0x1CA, 0x02A, 0x12A, 0x0AA, 0x1AA, 0x06A, 0x16A, 0x0EA, 0x1EA,
                        0x01A, 0x11A, 0x09A, 0x19A, 0x05A, 0x15A, 0x0DA, 0x1DA, 0x03A, 0x13A, 0x0BA, 0x1BA, 0x07A, 0x17A, 0x0FA, 0x1FA,
                        0x006, 0x106, 0x086, 0x186, 0x046, 0x146, 0x0C6, 0x1C6, 0x026, 0x126, 0x0A6, 0x1A6, 0x066, 0x166, 0x0E6, 0x1E6,
                        0x016, 0x116, 0x096, 0x196, 0x056, 0x156, 0x0D6, 0x1D6, 0x036, 0x136, 0x0B6, 0x1B6, 0x076, 0x176, 0x0F6, 0x1F6,
                        0x00E, 0x10E, 0x08E, 0x18E, 0x04E, 0x14E, 0x0CE, 0x1CE, 0x02E, 0x12E, 0x0AE, 0x1AE, 0x06E, 0x16E, 0x0EE, 0x1EE,
                        0x01E, 0x11E, 0x09E, 0x19E, 0x05E, 0x15E, 0x0DE, 0x1DE, 0x03E, 0x13E, 0x0BE, 0x1BE, 0x07E, 0x17E, 0x0FE, 0x1FE,
                        0x001, 0x101, 0x081, 0x181, 0x041, 0x141, 0x0C1, 0x1C1, 0x021, 0x121, 0x0A1, 0x1A1, 0x061, 0x161, 0x0E1, 0x1E1,
                        0x011, 0x111, 0x091, 0x191, 0x051, 0x151, 0x0D1, 0x1D1, 0x031, 0x131, 0x0B1, 0x1B1, 0x071, 0x171, 0x0F1, 0x1F1,
                        0x009, 0x109, 0x089, 0x189, 0x049, 0x149, 0x0C9, 0x1C9, 0x029, 0x129, 0x0A9, 0x1A9, 0x069, 0x169, 0x0E9, 0x1E9,
                        0x019, 0x119, 0x099, 0x199, 0x059, 0x159, 0x0D9, 0x1D9, 0x039, 0x139, 0x0B9, 0x1B9, 0x079, 0x179, 0x0F9, 0x1F9,
                        0x005, 0x105, 0x085, 0x185, 0x045, 0x145, 0x0C5, 0x1C5, 0x025, 0x125, 0x0A5, 0x1A5, 0x065, 0x165, 0x0E5, 0x1E5,
                        0x015, 0x115, 0x095, 0x195, 0x055, 0x155, 0x0D5, 0x1D5, 0x035, 0x135, 0x0B5, 0x1B5, 0x075, 0x175, 0x0F5, 0x1F5,
                        0x00D, 0x10D, 0x08D, 0x18D, 0x04D, 0x14D, 0x0CD, 0x1CD, 0x02D, 0x12D, 0x0AD, 0x1AD, 0x06D, 0x16D, 0x0ED, 0x1ED,
                        0x01D, 0x11D, 0x09D, 0x19D, 0x05D, 0x15D, 0x0DD, 0x1DD, 0x03D, 0x13D, 0x0BD, 0x1BD, 0x07D, 0x17D, 0x0FD, 0x1FD,
                        0x003, 0x103, 0x083, 0x183, 0x043, 0x143, 0x0C3, 0x1C3, 0x023, 0x123, 0x0A3, 0x1A3, 0x063, 0x163, 0x0E3, 0x1E3,
                        0x013, 0x113, 0x093, 0x193, 0x053, 0x153, 0x0D3, 0x1D3, 0x033, 0x133, 0x0B3, 0x1B3, 0x073, 0x173, 0x0F3, 0x1F3,
                        0x00B, 0x10B, 0x08B, 0x18B, 0x04B, 0x14B, 0x0CB, 0x1CB, 0x02B, 0x12B, 0x0AB, 0x1AB, 0x06B, 0x16B, 0x0EB, 0x1EB,
                        0x01B, 0x11B, 0x09B, 0x19B, 0x05B, 0x15B, 0x0DB, 0x1DB, 0x03B, 0x13B, 0x0BB, 0x1BB, 0x07B, 0x17B, 0x0FB, 0x1FB,
                        0x007, 0x107, 0x087, 0x187, 0x047, 0x147, 0x0C7, 0x1C7, 0x027, 0x127, 0x0A7, 0x1A7, 0x067, 0x167, 0x0E7, 0x1E7,
                        0x017, 0x117, 0x097, 0x197, 0x057, 0x157, 0x0D7, 0x1D7, 0x037, 0x137, 0x0B7, 0x1B7, 0x077, 0x177, 0x0F7, 0x1F7,
                        0x00F, 0x10F, 0x08F, 0x18F, 0x04F, 0x14F, 0x0CF, 0x1CF, 0x02F, 0x12F, 0x0AF, 0x1AF, 0x06F, 0x16F, 0x0EF, 0x1EF,
                        0x01F, 0x11F, 0x09F, 0x19F, 0x05F, 0x15F, 0x0DF, 0x1DF, 0x03F, 0x13F, 0x0BF, 0x1BF, 0x07F, 0x17F, 0x0FF, 0x1FF};


int bit_reverse(int q)
{
    return bit_reverse_lut[q];
}

vec2 cmul(vec2 z, vec2 w)
{
    return vec2(z.x * w.x - z.y * w.y, z.x * w.y + z.y * w.x);
}

const float           pi = 3.141592653589793238462643383279502884197169399375105820974;
const float highest_freq = pi / (n / 2);
const float inv_sqrt2    = 0.707106781186547524400844362104849039284835937688474036588;

//========================================================================================================================================================================================================================
// Auxiliary stuff
//========================================================================================================================================================================================================================

vec2 u0, u1, u2, u3, u4, u5, u6, u7;
vec2 v0, v1, v2, v3, v4, v5, v6, v7;
vec2 w, sw, iw, isw, w2, iw2, w4;

void initial_step8(int b)
{
    u0 = imageLoad(input_buffer, b + (0 << (m - 3))).rg;
    u1 = imageLoad(input_buffer, b + (4 << (m - 3))).rg;
    u2 = imageLoad(input_buffer, b + (2 << (m - 3))).rg;
    u3 = imageLoad(input_buffer, b + (6 << (m - 3))).rg;
    u4 = imageLoad(input_buffer, b + (1 << (m - 3))).rg;
    u5 = imageLoad(input_buffer, b + (5 << (m - 3))).rg;
    u6 = imageLoad(input_buffer, b + (3 << (m - 3))).rg;
    u7 = imageLoad(input_buffer, b + (7 << (m - 3))).rg;

    v0 = u0 + u1; v1 = u0 - u1; v2 = u2 + u3; v3 = u2 - u3;
    v4 = u4 + u5; v5 = u4 - u5; v6 = u6 + u7; v7 = u6 - u7;

    v3 = vec2(-v3.y, v3.x); v7 = vec2(-v7.y, v7.x);

    u0 = v0 + v2; u1 = v1 + v3; u2 = v0 - v2; u3 = v1 - v3;
    u4 = v4 + v6; u5 = v5 + v7; u6 = v4 - v6; u7 = v5 - v7;

    u5 = inv_sqrt2 * vec2(u5.x - u5.y, u5.x + u5.y); 
    u6 = vec2(-u6.y, u6.x); 
    u7 = inv_sqrt2 * vec2(-u7.x - u7.y, u7.x - u7.y);

    b = iX << 3;

    Z[b + 0] = u0 + u4; Z[b + 1] = u1 + u5; Z[b + 2] = u2 + u6; Z[b + 3] = u3 + u7;
    Z[b + 4] = u0 - u4; Z[b + 5] = u1 - u5; Z[b + 6] = u2 - u6; Z[b + 7] = u3 - u7;
}

void middle_step8(int p2, float freq)
{
    int mask = p2 - 1;
    int h = iX & ~mask;
    int b = 7 * h + iX;
    float arg = freq * (iX & mask);

      w = vec2(cos(arg), sin(arg)); 
     sw = inv_sqrt2 * vec2(w.x - w.y, w.x + w.y);
     iw = vec2( -w.y,  w.x);
    isw = vec2(-sw.y, sw.x);
     w2 = vec2(w.x * w.x - w.y * w.y, 2.0 * w.x * w.y);
    iw2 = vec2(-w2.y, w2.x);
     w4 = vec2(w2.x * w2.x - w2.y * w2.y, 2.0 * w2.x * w2.y);

    barrier();

    u0 = Z[b + 0 * p2]; u1 = Z[b + 1 * p2]; u2 = Z[b + 2 * p2]; u3 = Z[b + 3 * p2]; 
    u4 = Z[b + 4 * p2]; u5 = Z[b + 5 * p2]; u6 = Z[b + 6 * p2]; u7 = Z[b + 7 * p2]; 

    u1 = cmul(w4, u1); u3 = cmul(w4, u3);
    u5 = cmul(w4, u5); u7 = cmul(w4, u7); 

    v0 = u0 + u1; v1 = u0 - u1; v2 = u2 + u3; v3 = u2 - u3; 
    v4 = u4 + u5; v5 = u4 - u5; v6 = u6 + u7; v7 = u6 - u7; 

    v2 = cmul(w2, v2); v3 = cmul(iw2, v3);
    v6 = cmul(w2, v6); v7 = cmul(iw2, v7);

    u0 = v0 + v2; u1 = v1 + v3; u2 = v0 - v2; u3 = v1 - v3;
    u4 = v4 + v6; u5 = v5 + v7; u6 = v4 - v6; u7 = v5 - v7; 

    u4 = cmul( w, u4); u5 = cmul( sw, u5);
    u6 = cmul(iw, u6); u7 = cmul(isw, u7);

    Z[b + 0 * p2] = u0 + u4; Z[b + 1 * p2] = u1 + u5; Z[b + 2 * p2] = u2 + u6; Z[b + 3 * p2] = u3 + u7;
    Z[b + 4 * p2] = u0 - u4; Z[b + 5 * p2] = u1 - u5; Z[b + 6 * p2] = u2 - u6; Z[b + 7 * p2] = u3 - u7;        
}

void final_step8()
{
    float arg = highest_freq * iX;

      w = vec2(cos(arg), sin(arg)); 
     sw = inv_sqrt2 * vec2(w.x - w.y, w.x + w.y);
     iw = vec2( -w.y,  w.x);
    isw = vec2(-sw.y, sw.x);
     w2 = vec2(w.x * w.x - w.y * w.y, 2.0 * w.x * w.y);
    iw2 = vec2(-w2.y, w2.x);
     w4 = vec2(w2.x * w2.x - w2.y * w2.y, 2.0 * w2.x * w2.y);

    barrier();

    u0 = Z[iX + (0 << (m - 3))]; u1 = Z[iX + (1 << (m - 3))]; u2 = Z[iX + (2 << (m - 3))]; u3 = Z[iX + (3 << (m - 3))];
    u4 = Z[iX + (4 << (m - 3))]; u5 = Z[iX + (5 << (m - 3))]; u6 = Z[iX + (6 << (m - 3))]; u7 = Z[iX + (7 << (m - 3))];

    u1 = cmul(w4, u1); u3 = cmul(w4, u3); 
    u5 = cmul(w4, u5); u7 = cmul(w4, u7); 

    v0 = u0 + u1; v1 = u0 - u1; v2 = u2 + u3; v3 = u2 - u3;
    v4 = u4 + u5; v5 = u4 - u5; v6 = u6 + u7; v7 = u6 - u7;

    v2 = cmul(w2, v2); v3 = cmul(iw2, v3);
    v6 = cmul(w2, v6); v7 = cmul(iw2, v7);

    u0 = v0 + v2; u1 = v1 + v3; u2 = v0 - v2; u3 = v1 - v3;
    u4 = v4 + v6; u5 = v5 + v7; u6 = v4 - v6; u7 = v5 - v7;

    u4 = cmul( w, u4); u5 = cmul( sw, u5);
    u6 = cmul(iw, u6); u7 = cmul(isw, u7);    

    int b = (iY << m) + iX;

    imageStore(inout_buffer, b + (0 << (m - 3)), vec4(u0 + u4, 0.0, 0.0));
    imageStore(inout_buffer, b + (1 << (m - 3)), vec4(u1 + u5, 0.0, 0.0));
    imageStore(inout_buffer, b + (2 << (m - 3)), vec4(u2 + u6, 0.0, 0.0));
    imageStore(inout_buffer, b + (3 << (m - 3)), vec4(u3 + u7, 0.0, 0.0));
    imageStore(inout_buffer, b + (4 << (m - 3)), vec4(u0 - u4, 0.0, 0.0));
    imageStore(inout_buffer, b + (5 << (m - 3)), vec4(u1 - u5, 0.0, 0.0));
    imageStore(inout_buffer, b + (6 << (m - 3)), vec4(u2 - u6, 0.0, 0.0));
    imageStore(inout_buffer, b + (7 << (m - 3)), vec4(u3 - u7, 0.0, 0.0));
}

void main(void)
{
    // FFT512 as FFT8 + FFT8 + FFT8
    int b = (iY << m) + bit_reverse(iX);
    initial_step8(b);
    middle_step8( 8, pi / 32);
    final_step8();

    // FFT1024 as FFT4 + FFT4 + FFT4 + FFT4 + FFT4

}