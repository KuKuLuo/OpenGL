#version 420 core

layout (quads, equal_spacing, ccw) in;

in vec2 shift[];

uniform sampler2D value_texture;
uniform mat4 projection_view_matrix;
uniform float lattice_scale;
uniform float time;

const float TEXEL_SIZE = 1.0 / 256.0;
const float HALF_TEXEL = 1.0 / 512.0;

float snoise(in vec2 p, out vec2 dF)
{
    const float F2 = 0.36602540378443864676372317075294;                            
    const float G2 = 0.21132486540518711774542560974902;                            
    const float H2 = 0.57735026918962576450914878050196;                            
    const float NORMALIZER = 95.0;
    const vec2 F = vec2(F2, NORMALIZER);
    const vec4 dp = vec4(G2, -H2, G2 - 1.0, 0.0);
    vec2 i = floor(p + dot(p, F.xx));
    vec2 p0 = i - dot(i, dp.xx);                                                    
    vec2 uv = TEXEL_SIZE * i + HALF_TEXEL;                                          
    vec2 dp0 = p - p0;                                                              
    vec4 a = textureGather(value_texture, uv, 0) - 0.5;                             
    vec4 b = textureGather(value_texture, uv, 2) - 0.5;                             
    vec4 inv_norm = inversesqrt(a * a + b * b);
    vec4 dx = dp0.xxxx + dp;                                                        
    vec4 dy = dp0.yyyy + dp.zyxw;                                                   
    vec4 n = max(0.5 - dx * dx - dy * dy, 0.0);        
    vec4 n0 = n * n; 
    vec4 v3 = n * n0 * (a * dx + b * dy);
    n0 *= n0;
    dF = NORMALIZER * vec2(dot(n0 * a - 8.0 * dx * v3, inv_norm), dot(n0 * b - 8.0 * dy * v3, inv_norm));
    return NORMALIZER * dot(n * v3, inv_norm);                                      
}

float fract_snoise(in vec2 x, out vec2 dF)
{
    const int level = 6;
    float frequency = 1.0;
    float amplitude = 0.5;
    float v = amplitude * snoise(x, dF);
    for(int i = 0; i < level; ++i)
    {
        vec2 df;
        frequency *= 2.0;
        amplitude *= 0.5;    
        v += amplitude * snoise(frequency * x, df);
        dF += df;
    }
    dF *= 0.5;
    return v;
}

out vec2 uv;
out float value;
out vec3 normal;

void main()
{
    uv = shift[0] + gl_TessCoord.xy - vec2(0.5);
    vec2 dF;
    value = 0.5 + 0.5 * fract_snoise(uv * 0.05, dF);
    normal = normalize(vec3(dF, -1.0));
    vec3 position_ws = vec3(lattice_scale * uv, 8192.0f * value);
    gl_Position = projection_view_matrix * vec4(position_ws, 1.0f);
}




