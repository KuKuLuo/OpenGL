#version 400 core

layout (quads, equal_spacing, ccw) in;

in vec2 shift[];

uniform mat4 projection_view_matrix;
uniform float base_scale;
uniform float time;

out vec3 normal_ws;
out vec2 uv;



//==============================================================================================================================================================
// Helper functions
//==============================================================================================================================================================
vec2 mod289(vec2 x)
    { return x - floor(x * (1.0f / 289.0f)) * 289.0f; }
vec3 mod289(vec3 x)
    { return x - floor(x * (1.0f / 289.0f)) * 289.0f; }
vec4 mod289(vec4 x)
    { return x - floor(x * (1.0f / 289.0f)) * 289.0f; }

float permute(float x) 
    { return mod((34.0f * x + 1.0f) * x, 289.0f); }
vec3 permute(vec3 x) 
    { return mod((34.0f * x + 1.0f) * x, 289.0f); }
vec4 permute(vec4 x) 
    { return mod289(((x * 34.0f) + 1.0f) * x); }
vec4 taylorInvSqrt(vec4 r) 
    { return 1.792843f - 0.853735f * r; }

//==============================================================================================================================================================
// Simplex noise
//==============================================================================================================================================================

float snoise (vec2 v)
{
    const vec4 C = vec4 (0.211324865405187f,                                // (3.0f - sqrt(3.0f)) / 6.0f
                         0.366025403784439f,                                //  0.5f * (sqrt(3.0f) - 1.0f)
                        -0.577350269189626f,                                // -1.0f + 2.0f * C.x
                         0.024390243902439f);                               //  1.0f / 41.0f

    vec2 i = floor (v + dot(v, C.yy));
    vec2 x0 = v - i + dot(i, C.xx);
    vec2 i1 = (x0.x > x0.y) ? vec2 (1.0f, 0.0f) : vec2 (0.0f, 1.0f);
    vec4 x12 = x0 . xyxy + C. xxzz ;
    x12.xy -= i1 ;
    i = mod289 (i);
    vec3 p = permute(permute(i.y + vec3(0.0f, i1.y, 1.0f)) + i.x + vec3(0.0f, i1 .x , 1.0f));
    vec3 m = max (0.5f - vec3(dot(x0, x0) , dot(x12.xy, x12.xy), dot(x12.zw , x12.zw)), 0.0f);
    m = m*m;
    m = m *m;
    vec3 x = 2.0 * fract (p * C. www ) - 1.0;
    vec3 h = abs (x) - 0.5;
    vec3 a0 = x - floor (x + 0.5) ;
    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
    vec3 g = vec3(a0.x * x0.x + h.x * x0.y, a0.yz * x12.xz + h.yz * x12.yw);
    return 130.0f * dot(m, g);
}


// sea
const int ITER_GEOMETRY = 3;
const int ITER_FRAGMENT = 5;
const float SEA_HEIGHT = 0.6;
const float SEA_CHOPPY = 4.0;
const float SEA_SPEED = 0.8;
const float SEA_FREQ = 0.16;
const vec3 SEA_BASE = vec3(0.1, 0.19, 0.22);
const vec3 SEA_WATER_COLOR = vec3(0.8, 0.9, 0.6);
float SEA_TIME = time * SEA_SPEED;
mat2 octave_m = mat2(1.6, 1.2, -1.2, 1.6);

float sea_octave(vec2 uv, float choppy)
{
    uv += snoise(uv);        
    vec2 wv = 1.0 - abs(sin(uv));
    vec2 swv = abs(cos(uv));    
    wv = mix(wv, swv, wv);
    return pow(1.0 - pow(wv.x * wv.y, 0.65), choppy);
}


float map(vec2 uv)
{
    uv *= 0.125;
    float freq = SEA_FREQ;
    float amp = SEA_HEIGHT;
    float choppy = SEA_CHOPPY;
    
    float d, h = 0.0;    
    for(int i = 0; i < ITER_GEOMETRY; i++)
    { 
        d = sea_octave((uv + SEA_TIME) * freq, choppy);
        d += sea_octave((uv - SEA_TIME) * freq, choppy);
        h += d * amp;        
        uv *= octave_m; freq *= 1.9; amp *= 0.22;
        choppy = mix(choppy, 1.0, 0.2);
    }
    return 100.0 * h;
}



void main()
{
    uv = shift[0] + gl_TessCoord.xy;
    vec2 uv_dx = uv + vec2(0.01f, 0.00f);
    vec2 uv_dy = uv + vec2(0.00f, 0.01f);

    vec3 position_ws    = vec3(base_scale * uv, 100.0 * map(uv));
    
    vec3 position_ws_dx = vec3(base_scale * uv_dx, 100.0 * map(uv_dx));
    vec3 position_ws_dy = vec3(base_scale * uv_dy, 100.0 * map(uv_dy));

    normal_ws = normalize(cross(position_ws_dx - position_ws, position_ws_dy - position_ws));

    uv /= 64.0;
    uv += vec2(0.5);
    gl_Position = projection_view_matrix * vec4(position_ws, 1.0f);
}




